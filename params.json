{"name":"Gitline","tagline":"GitLine project for SPLE on top of Git SCM","body":"### Welcome to GitLine Project Page.\r\n\r\nGitLine layers GitHub pages with additional buttons for **ProductFork**, **UpdatePropagation** and **FeedBackPropagation**. Using Web Augmentation techniques, these buttons enact the namesake operations, i.e. repositories are accessed\r\nthrough GitHub's APIs, and extra iFrames are popped-up, should additional interactions with the user be needed.\r\n\r\n###Product Fork\r\n\r\nProduct derivation is performed upon CoreAsset repositories, along a given configuration.\r\nFigure below depicts VODPlayer-CoreAssets repository,available at https://github.com/letimome/VODPlayer-CoreAssets. Readers can click on this URL. However, this will only recover a plain GitHub HTML page. Enhancing GitHub pages with SPL-specifi\fc VCS operations is achieved through the GitLine browser extension. A browser extension extends the functionality of a Web browser. Specifi\fcally, GitLine layers GitHub pages with additional buttons for ProductFork, UpdatePropagation and FeedBackPropagation. UsingWeb Augmentation techniques, these buttons enact the namesake operations, i.e. repositories are accessed through GitHub's APIs, and extra iFrames are popped-up, should additional interactions with the user be needed. \r\n\r\nDrop icons are used to highlight certain facts. Double-lined drops denote GitLine layered content. Drop A points to the owner and repository name: letimome and VODPlayer-CoreAssets, respectively. Drop B points to the current branch. Drop C points to the core assets. On top of this rendering, GitLine layers additional content: a new\r\nbutton (drop D). On clicking, a panel shows up which delivers an IFrame which holds the result of invoking a web-accessible feature confi\fgurator: S.P.L.O.T (drop E). The panel is automatically generated from the VODPlayer feature model which, in the current implementation, needs to be previously loaded at S.P.L.O.T. Users are now guided by S.P.L.O.T in setting the con\ffiguration. Once the con\fguration is over, click 'Create Product Repository' button which resorts to GitHub's API to automatically create a GitHub repository. Its name follows the pattern: <SPL name><product><date> (e.g. VODPlayer-Product-05ABR2015 ). This repository is already initialized with a BigBang branch, Update branch and a Develop branch. The latter holds the selected core assets. Now, application engineers are ready to start.\r\n\r\n![Product Fork Operation](https://github.com/letimome/GitLine/blob/gh-pages/images/productFork.pdf)\r\n\r\n###Update Propagation\r\n\r\nUpdate propagation is performed by application engineers upon a Product repository. Figure below depictsVODPlayer-\r\nProduct-05ABR2015, i.e. the Product repository obtained in the previous sub-section and available at https://github.\r\ncom/lemome88/VODPlayer-Product-05ABR2015. Let's assume that core assets evolved since we instantiated them, e.g, there is a new version for ChooseMovie asset. Application engineers to acknowledge this, first need to checkout update.updates branch. Figure below (left) depicts this scenario. Drop B points to the current branch. Drop A points to the Update Propagation button. On clicking, a pop-up displays the summary of changes to be pulled (drop C): a list of rows with the name of the updated core asset (e.g. ChooseMovie), and a link to the Core-Asset-repository's commits describing those changes (New commits\"). Following these links brings product engineers to the Core Asset realm by opening a new browser tab, where the ChooseMovie asset evolution is shown in a di\u000Bff panel (not shown in the Figure), so that product engineers can make an informed decision about whether to pull these changes back to the Product repository. If so decided, developers go back to the Product repository (Figure below (left), and click the Yes button (drop D). The ChooseMovie newer version is pushed to the Update branch (e.g. update:updates). Application engineers are noti\ffied through a new pull request (drop E) to merge\r\nupdate:updates into develop:productAssets. Developers can now open the pull request to retrieve the changes (drop F).\r\nA new page shows up with the di\u000Bfferences: di\u000Bff (develop:productAssets, update:updates). If changes are accepted, application engineers merge the branches. Otherwise, the pull request is closed, and the Product repository sticks with the\r\nold asset versions.\r\n\r\n![Update Propagation Operation](https://github.com/letimome/GitLine/tree/gh-pahes/images/updateProp.pdf)\r\n\r\n###Feedback Propagation \r\n\r\nFeedBack propagation is performed over a Product repository. Figure below (left) depicts VODPlayer-Product-05ABR2015 repository, which holds a customization (i.e., customCA4 ) for core asset PlayMovie. Application engineers to promote changes done in customCA4 (i.e. new version for CA4 ) should first checkout a custom branch. Figure\r\nbelow (left) depicts this scenario. Drop B points to the current branch. Drop A points to the new FeedBack Propagation button. On clicking, a pop-up lists all Custom branches that the Product repository holds (drop C). Users can now select the desired customization (e.g. customCA4 branch), and press the Yes button (drop D). Behind the scenes, a new Feedback branch is created (i.e, feedbackCA4 ), and the Core-Asset repository receives a pull request coming from the Product repository (drop E in Figure below (right)). When this request is opened, domain engineers are invited to merge the newly created VODPlayer-Product's FeedBack branch (i.e., feedback:customCA4 ) into VODPlayer-CoreAssets' Develop branch (i.e., develop: coreAssets). Drop F points to the diff\u000B view of the changes proposed by this pull request. At this point, domain engineers should decide whether the customization is useful to the whole product line. If so, domain engineers would need to refactor the customized core assets. \r\n\r\n![Feedback Propagation Operation](https://github.com/letimome/GitLine/tree/gh-pahes/images/feedbackProp.pdf)\r\n\r\n###Install\r\n\r\nGitLine works for Firefox 37.0. To install the extension do:\r\n\r\n1. Copy this repository to Firefox extensions folder in your computer\r\n2. Get a GitHub Access Token https://help.github.com/articles/creating-an-access-token-for-command-line-use/, and paste it in function `DeltaUtils.getUserAccessToken` in file `content/githubdelta.js`.\r\n3. In Firefox URL bar type \"about:config\". Set the following values to false:\r\n`security.csp.enable=false`; `security.mixed-content.block_active_content=false`\r\n\r\n### Support or Contact\r\nShould you have problems or questions contact leticia.montalvillo@ehu.es","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}